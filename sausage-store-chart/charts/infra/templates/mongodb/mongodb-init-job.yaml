---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-mongodb-init
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "5"
    helm.sh/hook-delete-policy: "hook-succeeded"
  labels:
    app.kubernetes.io/name: mongodb-init
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app.kubernetes.io/component: database-init
    app.kubernetes.io/part-of: {{ .Release.Name }}
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: mongodb-init
    spec:
      restartPolicy: Never
      containers:
      - name: mongodb-init
        image: {{ .Values.infra.mongodb.image }}
        resources:
          {{- toYaml .Values.infra.mongodb.resources | nindent 10 }}
        env:
        - name: MONGO_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-secret
              key: root-username
        - name: MONGO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-secret
              key: root-password
        - name: REPORTS_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-secret
              key: reports-username
        - name: REPORTS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mongodb-secret
              key: reports-password
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Waiting for MongoDB to be ready..."
          until mongosh --host mongodb --eval "print(\"waited for connection\")"
          do
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "MongoDB is ready. Creating reports user..."
          mongosh mongodb://$MONGO_ROOT_USERNAME:$MONGO_ROOT_PASSWORD@mongodb:{{ .Values.infra.mongodb.containerPort }}/admin <<EOF
          use {{ .Values.infra.mongodb.database }}
          try {
            db.createUser({
              user: "$REPORTS_USERNAME",
              pwd: "$REPORTS_PASSWORD",
              roles: [
                { role: "readWrite", db: "{{ .Values.infra.mongodb.database }}" }
              ]
            })
            print("User '$REPORTS_USERNAME' created successfully!")
          } catch (e) {
            if (e.code === 11000) {
              print("User '$REPORTS_USERNAME' already exists")
            } else {
              throw e
            }
          }
          EOF
          echo "MongoDB initialization completed successfully!"
